{"name": "test_place_order_login_before_checkout", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nCall log:\n  - waiting for locator(\"a[href='/checkout']\")", "trace": "page = <Page url='https://automationexercise.com/checkout'>\n\n    @pytest.mark.order_flow\n    def test_place_order_login_before_checkout(page):\n        # Step 1: Open homepage\n        page.goto(\"http://automationexercise.com\")\n        expect(page.locator(\"html\")).to_be_visible()\n    \n        # Step 2: Login\n        page.locator(\"a[href='/login']\").click()\n        page.fill(\"input[data-qa='login-email']\", EMAIL)\n        page.fill(\"input[data-qa='login-password']\", PASSWORD)\n        page.locator(\"button[data-qa='login-button']\").click()\n        expect(page.locator(\"a:has-text('Logged in as')\")).to_be_visible()\n        logger.info(\"Logged in successfully\")\n    \n        # Step 3: Add products\n        page.goto(\"https://automationexercise.com/products\")\n        page.hover(\"div.single-products\")\n        page.locator(\"a[data-product-id='1']\").first.click()\n        page.wait_for_selector(\"#cartModal\")\n        page.locator(\"button[data-dismiss='modal']\").click()\n        logger.info(\"Product added to cart\")\n    \n        # Step 4: Go to cart\n        cart_button = page.locator(\"a[href='/view_cart']\").first\n        cart_button.wait_for(state=\"visible\", timeout=5000)\n        cart_button.click()\n        expect(page.locator(\"li.active:has-text('Shopping Cart')\")).to_be_visible()\n        # page.locator(\"//*[@id='do_action']/div[1]/div/div/a\").click()\n        page.get_by_text(\"Proceed To Checkout\").click()\n        logger.info(\"Cart page is visible\")\n    \n        # Step 5: Proceed to checkout\n>       page.locator(\"a[href='/checkout']\").click()\n\nui_test.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15505: in click\n    self._sync(\n..\\..\\.venv\\Lib\\site-packages\\playwright\\_impl\\_locator.py:160: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:521: in click\n    await self._channel.send(\"click\", self._timeout, locals_to_params(locals()))\n..\\..\\.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001BE54E196A0>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001BE55263E20>\nis_internal = False, title = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"a[href='/checkout']\")\n\n..\\..\\.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:558: TimeoutError"}, "start": 1751972396256, "stop": 1751972445237, "uuid": "29ce46be-1b2b-4982-9a29-766dc51cf8ed", "historyId": "7a8ee92266ad6143153a3f3d44f4aa64", "testCaseId": "7a8ee92266ad6143153a3f3d44f4aa64", "fullName": "tests.ui.ui_test#test_place_order_login_before_checkout", "labels": [{"name": "tag", "value": "order_flow"}, {"name": "parentSuite", "value": "tests.ui"}, {"name": "suite", "value": "ui_test"}, {"name": "host", "value": "WS01797"}, {"name": "thread", "value": "47644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui.ui_test"}]}